# Overview
# This workflow will pull latest Docker image from our repo,
# build a new image with the discord bot token, and deploy it the remote server.

# Required Secrets:
# Docker Account
# -  DOCKERHUB_USERNAME 
# -  DOCKERHUB_TOKEN
# Remote Server Info
# -  REMOTE_SERVER
# -  REMOTE_SERVER_USERNAME
# -  REMOTE_SERVER_PASSWORD
# -  REMOTE_SERVER_PORT
# Discord Bot Token
# -  DISCORD_TOKEN

name: Docker CD

on:
  push:
    branches:
      - "main"

env:
  USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
  REMOTE_SERVER: ${{ secrets.REMOTE_SERVER }}
  SERVER_USERNAME: ${{ secrets.REMOTE_SERVER_USERNAME }}
  SERVER_PASSWORD: ${{ secrets.REMOTE_SERVER_PASSWORD }}
  SERVER_PORT: ${{ secrets.REMOTE_SERVER_PORT }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.USERNAME }}
          password: ${{ env.TOKEN }}
      -
        name: Deploying to remote server via SSH
        uses: appleboy/ssh-action@master
        with:
            # Connecting to remote server via SSH
            host: ${{ env.REMOTE_SERVER }}
            username: ${{ env.SERVER_USERNAME }}
            password: ${{ env.SERVER_PASSWORD }}
            port: ${{ env.SERVER_PORT }}
            # Includes Building the Docker image and deploying it to the remote server
            script: |
              docker stop progphil-bot
              docker rm progphil-bot
              docker pull ${{ env.DOCKERHUB_USERNAME }}/progphil-bot:latest
              docker build --build-arg DISCORD_TOKEN=${{ env.DISCORD_TOKEN }} -t ${{ env.DOCKERHUB_USERNAME }}/progphil-bot:latest .
              docker run -d --name progphil-bot ${{ env.DOCKERHUB_USERNAME }}/progphil-bot:latest
              docker image prune -f
              docker container prune -f